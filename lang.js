// lang.js (corrected)
// Keeps translations for EN, HN, MR and exposes loadLanguage(), changeLanguage(), setLanguage()

// Translations object (complete keys used in your HTML + dashboard)
const translations = {
  EN: {
    // Navbar & General
    navFeatures: "Features",
    navAbout: "About",
    navContact: "Contact",
    heroTitle: "Empower Your City",
    heroDesc: "Report civic issues in real-time and track resolutions.",
    getStarted: "Get Started",

    // Login / state
    loginTitle: "Login to Continue",
    loginName: "Full Name*",
    loginMobile: "Mobile Number*",
    loginEmail: "Email (optional)",
    loginOtp: "OTP",
    loginGetOtp: "Get OTP",
    loginSubmit: "Submit",
    loginState: "Select State*",
    statePlaceholder: "Choose your state",

    // Report Form
    reportIssueTitle: "Report an Issue",
    issueTitle: "Issue Title",
    issueDesc: "Describe the problem...",
    issueLocation: "Enter location or allow GPS",
    issueSubmit: "ЁЯУ╕ Submit Report",

    // Dashboard Buttons
    btnPotholes: "Potholes",
    btnPotholesDesc: "Report road damages",
    btnGarbage: "Garbage",
    btnGarbageDesc: "Waste disposal issues",
    btnStreetlights: "Streetlights",
    btnStreetlightsDesc: "Faulty streetlights",
    btnWater: "Water Leakage",
    btnWaterDesc: "Pipeline issues",
    btnToilets: "Public Toilets",
    btnToiletsDesc: "Cleanliness issues",
    btnOther: "Other Complaints",
    btnOtherDesc: "Any other civic issue",
    btnPark: "Park Maintenance",
    btnParkDesc: "Broken benches, greenery care",
    btnSeasonal: "Seasonal Issues",
    btnSeasonalDesc: "Monsoon flooding, heat waves",
    btnTransport: "Public Transport",
    btnTransportDesc: "Buses, stops & infrastructure",

    // Statistics
    statsTitle: "ЁЯУК Civic Issue Statistics",
    reportedIssues: "Reported Issues",
    inProgress: "In Progress",
    resolved: "Resolved",

    // My Account Section
    manageAccount: "Manage My Account",
    reportStatus: "Report Status",
    feedback: "My Feedback",
    submitFeedback: "Submit Feedback",
    savedLocations: "Saved Locations",
    saveChanges: "Save Changes",
    save: "Save",
    logout: "Logout ЁЯЪк",
    status: "Status",

    // Popup
    loading: "тП│ Loading...",
    submissionSuccess: "тЬЕ Report submitted successfully!",

    // Status labels (for the report status log)
    statusSubmitted: "Submitted",
    statusReached: "Reached Authorities",
    statusAction: "Action Started",
    statusFixed: "Fixed",

    // States (accState & login select)
    stateAP: "Andhra Pradesh",
    stateAS: "Assam",
    stateBR: "Bihar",
    stateDL: "Delhi",
    stateGJ: "Gujarat",
    stateHR: "Haryana",
    stateKA: "Karnataka",
    stateMH: "Maharashtra",
    statePB: "Punjab",
    stateRJ: "Rajasthan",
    stateTN: "Tamil Nadu",
    stateUP: "Uttar Pradesh",
    stateWB: "West Bengal"
  },

  HN: {
    navFeatures: "рд╡рд┐рд╢реЗрд╖рддрд╛рдПрдБ",
    navAbout: "рд╣рдорд╛рд░реЗ рдмрд╛рд░реЗ рдореЗрдВ",
    navContact: "рд╕рдВрдкрд░реНрдХ рдХрд░реЗрдВ",
    heroTitle: "рдЕрдкрдиреЗ рд╢рд╣рд░ рдХреЛ рд╕рд╢рдХреНрдд рдмрдирд╛рдПрдВ",
    heroDesc: "рдирд╛рдЧрд░рд┐рдХ рд╕рдорд╕реНрдпрд╛рдПрдБ рддреБрд░рдВрдд рд░рд┐рдкреЛрд░реНрдЯ рдХрд░реЗрдВ рдФрд░ рд╕рдорд╛рдзрд╛рди рдЯреНрд░реИрдХ рдХрд░реЗрдВред",
    getStarted: "рд╢реБрд░реВ рдХрд░реЗрдВ",

    loginTitle: "рдЬрд╛рд░реА рд░рдЦрдиреЗ рдХреЗ рд▓рд┐рдП рд▓реЙрдЧрд┐рди рдХрд░реЗрдВ",
    loginName: "рдкреВрд░рд╛ рдирд╛рдо*",
    loginMobile: "рдореЛрдмрд╛рдЗрд▓ рдирдВрдмрд░*",
    loginEmail: "рдИрдореЗрд▓ (рд╡реИрдХрд▓реНрдкрд┐рдХ)",
    loginOtp: "рдУрдЯреАрдкреА",
    loginGetOtp: "рдУрдЯреАрдкреА рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ",
    loginSubmit: "рд╕рдмрдорд┐рдЯ",
    loginState: "рд░рд╛рдЬреНрдп рдЪреБрдиреЗрдВ*",
    statePlaceholder: "рдЕрдкрдирд╛ рд░рд╛рдЬреНрдп рдЪреБрдиреЗрдВ",

    reportIssueTitle: "рд╕рдорд╕реНрдпрд╛ рд░рд┐рдкреЛрд░реНрдЯ рдХрд░реЗрдВ",
    issueTitle: "рд╕рдорд╕реНрдпрд╛ рдХрд╛ рд╢реАрд░реНрд╖рдХ",
    issueDesc: "рд╕рдорд╕реНрдпрд╛ рдХрд╛ рд╡рд░реНрдгрди рдХрд░реЗрдВ...",
    issueLocation: "рд╕реНрдерд╛рди рджрд░реНрдЬ рдХрд░реЗрдВ рдпрд╛ рдЬреАрдкреАрдПрд╕ рдЕрдиреБрдорддрд┐ рджреЗрдВ",
    issueSubmit: "ЁЯУ╕ рд░рд┐рдкреЛрд░реНрдЯ рд╕рдмрдорд┐рдЯ рдХрд░реЗрдВ",

    btnPotholes: "рдЧрдбреНрдвреЗ",
    btnPotholesDesc: "рд╕рдбрд╝рдХ рдХреНрд╖рддрд┐ рдХреА рд░рд┐рдкреЛрд░реНрдЯ рдХрд░реЗрдВ",
    btnGarbage: "рдХрдЪрд░рд╛",
    btnGarbageDesc: "рдХрдЪрд░рд╛ рдирд┐рд╕реНрддрд╛рд░рдг рдХреА рд╕рдорд╕реНрдпрд╛рдПрдБ",
    btnStreetlights: "рд╕реНрдЯреНрд░реАрдЯрд▓рд╛рдЗрдЯ",
    btnStreetlightsDesc: "рдЦрд░рд╛рдм рд╕реНрдЯреНрд░реАрдЯрд▓рд╛рдЗрдЯ",
    btnWater: "рдкрд╛рдиреА рд░рд┐рд╕рд╛рд╡",
    btnWaterDesc: "рдкрд╛рдЗрдкрд▓рд╛рдЗрди рд╕рдорд╕реНрдпрд╛рдПрдБ",
    btnToilets: "рд╕рд╛рд░реНрд╡рдЬрдирд┐рдХ рд╢реМрдЪрд╛рд▓рдп",
    btnToiletsDesc: "рд╕реНрд╡рдЪреНрдЫрддрд╛ рд╕рдорд╕реНрдпрд╛рдПрдБ",
    btnOther: "рдЕрдиреНрдп рд╢рд┐рдХрд╛рдпрддреЗрдВ",
    btnOtherDesc: "рдХреЛрдИ рдЕрдиреНрдп рдирд╛рдЧрд░рд┐рдХ рд╕рдорд╕реНрдпрд╛",
    btnPark: "рдкрд╛рд░реНрдХ рд░рдЦрд░рдЦрд╛рд╡",
    btnParkDesc: "рдЯреВрдЯреА рдмреЗрдВрдЪ, рд╣рд░рд┐рдпрд╛рд▓реА рджреЗрдЦрднрд╛рд▓",
    btnSeasonal: "рдореМрд╕рдореА рд╕рдорд╕реНрдпрд╛рдПрдБ",
    btnSeasonalDesc: "рдмрд░рд╕рд╛рддреА рдмрд╛рдврд╝, рд▓реВ рдХреА рд▓рд╣рд░реЗрдВ",
    btnTransport: "рд╕рд╛рд░реНрд╡рдЬрдирд┐рдХ рдкрд░рд┐рд╡рд╣рди",
    btnTransportDesc: "рдмрд╕реЗрдВ, рд╕реНрдЯреЙрдк рдФрд░ рдврд╛рдВрдЪрд╛",

    statsTitle: "ЁЯУК рдирд╛рдЧрд░рд┐рдХ рд╕рдорд╕реНрдпрд╛ рдЖрдБрдХрдбрд╝реЗ",
    reportedIssues: "рд░рд┐рдкреЛрд░реНрдЯ рдХреА рдЧрдИ рд╕рдорд╕реНрдпрд╛рдПрдБ",
    inProgress: "рдкреНрд░рдЧрддрд┐ рдкрд░",
    resolved: "рд╕реБрд▓рдЭрд╛рдИ рдЧрдИ",

    manageAccount: "рдореЗрд░рд╛ рдЦрд╛рддрд╛ рдкреНрд░рдмрдВрдзрд┐рдд рдХрд░реЗрдВ",
    reportStatus: "рд░рд┐рдкреЛрд░реНрдЯ рд╕реНрдерд┐рддрд┐",
    feedback: "рдореЗрд░рд╛ рдлреАрдбрдмреИрдХ",
    submitFeedback: "рдлреАрдбрдмреИрдХ рд╕рдмрдорд┐рдЯ рдХрд░реЗрдВ",
    savedLocations: "рд╕рд╣реЗрдЬреЗ рдЧрдП рд╕реНрдерд╛рди",
    saveChanges: "рдкрд░рд┐рд╡рд░реНрддрди рд╕рд╣реЗрдЬреЗрдВ",
    save: "рд╕рд╣реЗрдЬреЗрдВ",
    logout: "рд▓реЙрдЧрдЖрдЙрдЯ ЁЯЪк",
    status: "рд╕реНрдерд┐рддрд┐",

    loading: "тП│ рд▓реЛрдб рд╣реЛ рд░рд╣рд╛ рд╣реИ...",
    submissionSuccess: "тЬЕ рд░рд┐рдкреЛрд░реНрдЯ рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рд╕рдмрдорд┐рдЯ рд╣реБрдИ!",

    statusSubmitted: "рд╕рдмрдорд┐рдЯ рдХрд┐рдпрд╛ рдЧрдпрд╛",
    statusReached: "рдЕрдзрд┐рдХрд╛рд░рд┐рдпреЛрдВ рддрдХ рдкрд╣реБрдБрдЪрд╛",
    statusAction: "рдХрд╛рд░реНрд░рд╡рд╛рдИ рд╢реБрд░реВ",
    statusFixed: "рд╕рдорд╛рдзрд╛рди рдХрд┐рдпрд╛ рдЧрдпрд╛",

    stateAP: "рдЖрдВрдзреНрд░ рдкреНрд░рджреЗрд╢",
    stateAS: "рдЕрд╕рдо",
    stateBR: "рдмрд┐рд╣рд╛рд░",
    stateDL: "рджрд┐рд▓реНрд▓реА",
    stateGJ: "рдЧреБрдЬрд░рд╛рдд",
    stateHR: "рд╣рд░рд┐рдпрд╛рдгрд╛",
    stateKA: "рдХрд░реНрдирд╛рдЯрдХ",
    stateMH: "рдорд╣рд╛рд░рд╛рд╖реНрдЯреНрд░",
    statePB: "рдкрдВрдЬрд╛рдм",
    stateRJ: "рд░рд╛рдЬрд╕реНрдерд╛рди",
    stateTN: "рддрдорд┐рд▓рдирд╛рдбреБ",
    stateUP: "рдЙрддреНрддрд░ рдкреНрд░рджреЗрд╢",
    stateWB: "рдкрд╢реНрдЪрд┐рдо рдмрдВрдЧрд╛рд▓"
  },

  MR: {
    navFeatures: "рд╡реИрд╢рд┐рд╖реНрдЯреНрдпреЗ",
    navAbout: "рдЖрдордЪреНрдпрд╛рдмрджреНрджрд▓",
    navContact: "рд╕рдВрдкрд░реНрдХ рдХрд░рд╛",
    heroTitle: "рддреБрдордЪреНрдпрд╛ рд╢рд╣рд░рд╛рд▓рд╛ рд╕рд╛рдорд░реНрдереНрдп рджреНрдпрд╛",
    heroDesc: "рдирд╛рдЧрд░реА рд╕рдорд╕реНрдпрд╛ рддреНрд╡рд░рд┐рдд рдиреЛрдВрджрд╡рд╛ рдЖрдгрд┐ рддреНрдпрд╛рдВрдЪреА рдкреНрд░рдЧрддреА рдЯреНрд░реЕрдХ рдХрд░рд╛.",
    getStarted: "рд╕реБрд░реВ рдХрд░рд╛",

    loginTitle: "рд╕реБрд░реВ рдареЗрд╡рдгреНрдпрд╛рд╕рд╛рдареА рд▓реЙрдЧрд┐рди рдХрд░рд╛",
    loginName: "рдкреВрд░реНрдг рдирд╛рд╡*",
    loginMobile: "рдореЛрдмрд╛рдИрд▓ рдирдВрдмрд░*",
    loginEmail: "рдИрдореЗрд▓ (рдРрдЪреНрдЫрд┐рдХ)",
    loginOtp: "рдУрдЯреАрдкреА",
    loginGetOtp: "рдУрдЯреАрдкреА рдорд┐рд│рд╡рд╛",
    loginSubmit: "рд╕рдмрдорд┐рдЯ рдХрд░рд╛",
    loginState: "рд░рд╛рдЬреНрдп рдирд┐рд╡рдбрд╛*",
    statePlaceholder: "рдЖрдкрд▓реЗ рд░рд╛рдЬреНрдп рдирд┐рд╡рдбрд╛",

    reportIssueTitle: "рд╕рдорд╕реНрдпрд╛ рдиреЛрдВрджрд╡рд╛",
    issueTitle: "рд╕рдорд╕реНрдпреЗрдЪреЗ рд╢реАрд░реНрд╖рдХ",
    issueDesc: "рд╕рдорд╕реНрдпреЗрдЪреЗ рд╡рд░реНрдгрди рдХрд░рд╛...",
    issueLocation: "рд╕реНрдерд╛рди рдкреНрд░рд╡рд┐рд╖реНрдЯ рдХрд░рд╛ рдХрд┐рдВрд╡рд╛ рдЬреАрдкреАрдПрд╕рд▓рд╛ рдкрд░рд╡рд╛рдирдЧреА рджреНрдпрд╛",
    issueSubmit: "ЁЯУ╕ рдЕрд╣рд╡рд╛рд▓ рд╕рдмрдорд┐рдЯ рдХрд░рд╛",

    btnPotholes: "рдЦрдбреНрдбреЗ",
    btnPotholesDesc: "рд░рд╕реНрддреНрдпрд╛рдЪреНрдпрд╛ рд╣рд╛рдиреАрдЪреА рдиреЛрдВрдж рдХрд░рд╛",
    btnGarbage: "рдХрдЪрд░рд╛",
    btnGarbageDesc: "рдХрдЪрд░рд╛ рд╡реНрдпрд╡рд╕реНрдерд╛рдкрди рд╕рдорд╕реНрдпрд╛",
    btnStreetlights: "рд░рд╕реНрддреНрдпрд╛рд╡рд░реАрд▓ рджрд┐рд╡реЗ",
    btnStreetlightsDesc: "рдмрд┐рдШрдбрд▓реЗрд▓реЗ рджрд┐рд╡реЗ",
    btnWater: "рдкрд╛рдгреНрдпрд╛рдЪреА рдЧрд│рддреА",
    btnWaterDesc: "рдкрд╛рдИрдкрд▓рд╛рдЗрди рд╕рдорд╕реНрдпрд╛",
    btnToilets: "рд╕рд╛рд░реНрд╡рдЬрдирд┐рдХ рд╢реМрдЪрд╛рд▓рдпреЗ",
    btnToiletsDesc: "рд╕реНрд╡рдЪреНрдЫрддреЗрдЪреНрдпрд╛ рд╕рдорд╕реНрдпрд╛",
    btnOther: "рдЗрддрд░ рддрдХреНрд░рд╛рд░реА",
    btnOtherDesc: "рдЗрддрд░ рдХреЛрдгрддреАрд╣реА рдирд╛рдЧрд░реА рд╕рдорд╕реНрдпрд╛",
    btnPark: "рдЙрджреНрдпрд╛рди рджреЗрдЦрднрд╛рд▓",
    btnParkDesc: "рддреБрдЯрд▓реЗрд▓реЗ рдмреЗрдВрдЪ, рд╣рд┐рд░рд╡рд│ рджреЗрдЦрднрд╛рд▓",
    btnSeasonal: "рд╣рдВрдЧрд╛рдореА рд╕рдорд╕реНрдпрд╛",
    btnSeasonalDesc: "рдорд╛рдиреНрд╕реВрди рдкреВрд░, рдЙрд╖реНрдгрддреЗрдЪреНрдпрд╛ рд▓рд╛рдЯрд╛",
    btnTransport: "рд╕рд╛рд░реНрд╡рдЬрдирд┐рдХ рд╡рд╛рд╣рддреВрдХ",
    btnTransportDesc: "рдмрд╕, рдерд╛рдВрдмреЗ рдЖрдгрд┐ рдкрд╛рдпрд╛рднреВрдд рд╕реБрд╡рд┐рдзрд╛",

    statsTitle: "ЁЯУК рдирд╛рдЧрд░реА рд╕рдорд╕реНрдпрд╛ рдЖрдХрдбреЗрд╡рд╛рд░реА",
    reportedIssues: "рдиреЛрдВрджрд╡рд▓реЗрд▓реНрдпрд╛ рд╕рдорд╕реНрдпрд╛",
    inProgress: "рдкреНрд░рдЧрддреАрдд",
    resolved: "рдирд┐рдХрд╛рд▓реА рдХрд╛рдврд▓реЗ",

    manageAccount: "рдорд╛рдЭреЗ рдЦрд╛рддреЗ рд╡реНрдпрд╡рд╕реНрдерд╛рдкрд┐рдд рдХрд░рд╛",
    reportStatus: "рд░рд┐рдкреЛрд░реНрдЯ рд╕реНрдерд┐рддреА",
    feedback: "рдорд╛рдЭрд╛ рдЕрднрд┐рдкреНрд░рд╛рдп",
    submitFeedback: "рдЕрднрд┐рдкреНрд░рд╛рдп рд╕рдмрдорд┐рдЯ рдХрд░рд╛",
    savedLocations: "рдЬрддрди рдХреЗрд▓реЗрд▓реА рдард┐рдХрд╛рдгреЗ",
    saveChanges: "рдмрджрд▓ рдЬрддрди рдХрд░рд╛",
    save: "рдЬрддрди рдХрд░рд╛",
    logout: "рд▓реЙрдЧрдЖрдЙрдЯ ЁЯЪк",
    status: "рд╕реНрдерд┐рддреА",

    loading: "тП│ рд▓реЛрдб рд╣реЛрдд рдЖрд╣реЗ...",
    submissionSuccess: "тЬЕ рд░рд┐рдкреЛрд░реНрдЯ рдпрд╢рд╕реНрд╡реАрд░реАрддреНрдпрд╛ рд╕рдмрдорд┐рдЯ рдЭрд╛рд▓рд╛!",

    statusSubmitted: "рд╕рдмрдорд┐рдЯ рдЭрд╛рд▓реЗ",
    statusReached: "рдЕрдзрд┐рдХрд╛рд▒реНрдпрд╛рдВрдХрдбреЗ рдкреЛрд╣реЛрдЪрд▓реЗ",
    statusAction: "рдХрд╛рд░рд╡рд╛рдИ рд╕реБрд░реВ",
    statusFixed: "рд╕реБрдзрд╛рд░рд▓реЗ",

    stateAP: "рдЖрдВрдзреНрд░ рдкреНрд░рджреЗрд╢",
    stateAS: "рдЖрд╕рд╛рдо",
    stateBR: "рдмрд┐рд╣рд╛рд░",
    stateDL: "рджрд┐рд▓реНрд▓реА",
    stateGJ: "рдЧреБрдЬрд░рд╛рдд",
    stateHR: "рд╣рд░рд┐рдпрд╛рдгрд╛",
    stateKA: "рдХрд░реНрдирд╛рдЯрдХ",
    stateMH: "рдорд╣рд╛рд░рд╛рд╖реНрдЯреНрд░",
    statePB: "рдкрдВрдЬрд╛рдм",
    stateRJ: "рд░рд╛рдЬрд╕реНрдерд╛рди",
    stateTN: "рддрд╛рдорд┐рд│рдирд╛рдбреВ",
    stateUP: "рдЙрддреНрддрд░ рдкреНрд░рджреЗрд╢",
    stateWB: "рдкрд╢реНрдЪрд┐рдо рдмрдВрдЧрд╛рд▓"
  }
};

// Expose current language (persist)
window.currentLang = localStorage.getItem("lang") || "EN";

// loadLanguage() - called from other scripts (keeps backward compatibility)
function loadLanguage() {
  const stored = localStorage.getItem("lang");
  if (stored && translations[stored]) window.currentLang = stored;
  applyTranslations();
}

// changeLanguage() - backward compat alias
function changeLanguage(lang) {
  setLanguage(lang);
}

// setLanguage(lang) - set and persist then apply
function setLanguage(lang) {
  if (!translations[lang]) return;
  window.currentLang = lang;
  localStorage.setItem("lang", lang);
  applyTranslations();
}

// applyTranslations - updates textContent/placeholders/values across the page
function applyTranslations() {
  document.querySelectorAll("[data-translate]").forEach(el => {
    const key = el.getAttribute("data-translate");
    const translation = translations[window.currentLang] && translations[window.currentLang][key];
    if (!translation) return;

    const tag = el.tagName;
    if (tag === "INPUT") {
      // if input is a button/submit - set value, otherwise placeholder
      const t = el.type && el.type.toLowerCase();
      if (t === "button" || t === "submit" || t === "reset" || t === "image") {
        el.value = translation;
      } else {
        el.placeholder = translation;
      }
    } else if (tag === "TEXTAREA") {
      el.placeholder = translation;
    } else {
      // use innerHTML so emoji/icons in translations are preserved
      el.innerHTML = translation;
    }
  });

  // Update 'Choose your state' placeholder option (first disabled option)
  const statePlaceholder = translations[window.currentLang] && translations[window.currentLang].statePlaceholder;
  const stateDisabledOpt = document.querySelector("#state option[disabled], #accState option[disabled]");
  if (stateDisabledOpt && statePlaceholder) {
    stateDisabledOpt.textContent = statePlaceholder;
  }

  // Update individual options that have data-translate (accState & state)
  document.querySelectorAll("#state option[data-translate], #accState option[data-translate]").forEach(option => {
    const key = option.getAttribute("data-translate");
    if (key && translations[window.currentLang] && translations[window.currentLang][key]) {
      option.textContent = translations[window.currentLang][key];
    }
  });

  // Update language button label (if present)
  const langBtn = document.getElementById("langDropdown");
  if (langBtn) langBtn.textContent = window.currentLang;

  // If status modal is open/visible, refresh report status labels (non-intrusive)
  try {
    if (document.getElementById("statusList") && typeof window.loadReportStatus === "function") {
      // don't force open; reload content so labels use new lang
      window.loadReportStatus();
    }
  } catch (err) {
    /* ignore */
  }
}

// Attach click listeners for elements with data-lang (index.html dropdown)
document.addEventListener("DOMContentLoaded", () => {
  // Attach page-level data-lang handlers (so both index and dashboard can use the same)
  document.querySelectorAll("[data-lang]").forEach(item => {
    item.addEventListener("click", (e) => {
      e.preventDefault();
      const code = item.getAttribute("data-lang");
      changeLanguage(code);
    });
  });

  // finally apply translations once on load
  loadLanguage();
});

// expose functions globally for backward compatibility
window.setLanguage = setLanguage;
window.changeLanguage = changeLanguage;
window.loadLanguage = loadLanguage;
